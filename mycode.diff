diff --git a/Makefile b/Makefile
index 76f220b..807cc4d 100644
--- a/Makefile
+++ b/Makefile
@@ -140,6 +140,9 @@ UPROGS=\
 	$U/_bcachetest\
 	$U/_mounttest\
 	$U/_crashtest\
+	$U/_sleep\
+	$U/_find\
+	$U/_xargs\
 
 fs.img: mkfs/mkfs README user/xargstest.sh $(UPROGS)
 	mkfs/mkfs fs.img README user/xargstest.sh $(UPROGS)
@@ -167,7 +170,7 @@ endif
 QEMUEXTRA = -drive file=fs1.img,if=none,format=raw,id=x1 -device virtio-blk-device,drive=x1,bus=virtio-mmio-bus.1
 
 QEMUOPTS = -machine virt -kernel $K/kernel -m 3G -smp $(CPUS) -nographic
-QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
+QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0 -bios none
 
 qemu: $K/kernel fs.img
 	$(QEMU) $(QEMUOPTS)
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..c1ed2ed
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,96 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+
+//Returns the name of a path
+char*
+fmtname(char *path)
+{
+  char *p;
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+  return p;
+}
+
+void _find(char *path, char *name){
+  char buf[512], *p;		//Buffer for Part1, temporarily stores the working
+  char buf2[512], *p2;		//Buffer for Part2
+  int fd;			//File Descriptor for Part1
+  int fd2;			//File Descriptor for Part2
+  struct dirent de;		//Directory struct for Part1
+  struct dirent de2;		//Directory struct for Part2
+  struct stat st;		//stat structure
+  	
+  if((fd = open(path, 0)) < 0){	//Open file specified by the path & catch error
+    fprintf(2, "Cannot open %s\n", path);
+    return;
+  }
+  if(fstat(fd, &st) < 0){	//Stat the file & catch error	
+    fprintf(2, "Cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+  if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){	//Check that the path is not too long	
+      printf("Path too long\n");
+      return;
+  }
+    //Copy the path to buffer and add a '/'
+    strcpy(buf, path);					
+    p = buf+strlen(buf);			
+    *p++ = '/';
+	
+    //Part 1 : Step through the directory and print out paths that match the given
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){	
+      if(de.inum == 0)								
+        continue;
+      memmove(p, de.name, DIRSIZ); //move the name of the file in directory into buf					
+      p[DIRSIZ] = 0;								
+      if(stat(buf, &st) < 0){	//stat the file de points to						
+        printf("Cannot stat %s\n", buf);
+        continue;
+      }
+     if(strcmp(fmtname(buf),name)==0){	//if the names are the same, print
+                printf("%s\n", buf);
+       }
+    }
+
+    //Close the directory, re-open the file, and copy the path to buffer again
+    //Similar to just before part 1
+    close(fd);
+    fd2 = open(path,0);     
+    strcpy(buf2, path);
+    p2 = buf2+strlen(buf2);
+    *p2++ = '/';
+   
+   //Part 2 : Step through the directory and recurse if we find a sub-directory 
+   while(read(fd2, &de2, sizeof(de2)) == sizeof(de2)){
+      if(de2.inum == 0)
+        continue;
+      memmove(p2, de2.name, DIRSIZ);
+      p2[DIRSIZ] = 0;
+      if(stat(buf2, &st) < 0){
+        printf("Cannot stat %s\n", buf2);
+        continue;
+      }
+     //Recurse into a file if it is of type directory, but not if its name is "." or ".."
+     if((st.type == T_DIR)&&(strcmp(fmtname(buf2),".")!=0)&&(strcmp(fmtname(buf2),"..")!=0)){
+        _find(buf2, name);
+      }
+    }
+
+    close(fd);
+	return;
+}
+
+int main(int argc, char *argv[]){
+ 
+	if(argc <=2){	//Check for correct argumets
+		printf("Please give a directory and filename\n");
+		exit();
+	}
+	_find(argv[1],argv[2]);	//Call find
+	exit();
+}
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..23f4066
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,18 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;	//Time the OS will sleep
+  
+  if(argc <= 1){	//Catch if no arguments
+    printf("Please give an argument for the number of cycles to sleep\n");
+    exit();
+  }
+  
+  i = atoi(argv[1]);	//The OS will sleep for the amount of time passed to sleep
+  sleep(i);		//syscall sleep
+  exit();
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..1627c57
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int
+main(int argc, char *argv[])
+{
+  char buf;	        //Stores standard input
+  char *args[MAXARG];	//Stores new args to pass to exec
+  int argsSize = 0;	//Stores size of args
+  int n;		//Loop variable
+  int pos = 0;		//Stores position of character we want to change
+  char newarg[1024];	//Stores new argument
+
+  if(argc < 2){		//Check that a command is passed to xargs
+	printf("Xargs: xargs cmd [args]\n");
+	exit();
+  }
+
+  //Pass argv[] arguments to args[]
+  if( strcmp(argv[1],"-n") == 0){	//If newline optimization, get fourth argument
+	n = 3;
+  }
+  else{
+	n = 1;				//Otherwise get the second
+  } 
+  while(n < argc){			//Pass arguments
+        args[argsSize] = argv[n];
+        argsSize++;
+        n++;
+  }
+  n = 0;
+  while((n = read(0, &buf, 1) > 0)) {	//Read stdin to buf
+    if (n < 0){				//Check we are reading
+	printf("read error\n");	
+    }
+    if(buf == '\n') {			//Stop adding characters to newarg on newline
+	newarg[pos] = '\0';		//end argument at newline position & pass to args
+        args[argsSize] = newarg;	
+	if(fork()==0){			//fork & call exec
+	   exec(args[0],args);
+	}
+	else{				//wait if the child hasn't returned yet
+	   wait();
+        }
+        pos = 0;			//reset the position for the next newline
+    }
+    else{				//Add characters to newarg from stdin			       
+       newarg[pos] = buf;
+       pos++;
+    }		
+  }
+  exit();
+}
